`sensortoolkit` contains dozens of individual modules and functions for computing
statistical metrics and generating figures in accordance with U.S. EPA's recommended
`performance metrics and targets <https://www.epa.gov/air-sensor-toolbox/air-sensor-performance-targets-and-testing-protocols>`_.
The ``SensorEvaluation`` class packages many of `sensortoolkit`'s modules into
a user-friendly and efficient platform for evaluating sensor performance.

A brief overview of ``SensorEvaluation``:
-----------------------------------------

* Loads unprocessed, recorded sensor data and converts datasets to `sensortoolkit`'s
  Sensor Data Formatting Scheme (S-DFS).
* Saves processed S-DFS datasets at recorded sampling frequnecy, and 1-hour and 24-hour averages
* Retreival of reference data from reference data repositories (AQS, AirNow) or local
  import of reference datasets, including support for downloaded datasets from AirNowTech.
  Reference data from any of the sources listed are translated into `sensortoolkit`'s
  Reference Data Formatting Standard (R-DFS) and are saved locally as .csv files.
* Time alignment of sensor and reference data to UTC timestamps.
* Computes various quantitites and metrics recommended by U.S. EPA's performance targets reports
  including precision (standard deviation, coefficient of variation), error (RMSE),
  linarity (:math:`R^2`), and bias (OLS regression slope and intercept).
* Contains numerous plotting methods for displaying and saving figures for
  time series, sensor vs. reference scatter, meteorological conditions, etc.
* Contains methods for printing summary statistics for evaluation conditions and
  performance evaluation results using U.S EPA's recommended performance metrics.

Below is an example instantiating the `SensorEvaluation` class for the `Example_Make_Model`
sensor datasets included alongside `sensortoolkit`. This example is for an evaluation of
PM2.5 sensor data against reference data retieved from AirNowTech (*further discussion of
reference data sources follows below*).

.. code-block:: python

  Eval = SensorEvaluation(
                  sensor_name='Example_Make_Model',
                  eval_param='PM25',
                  reference_data=ref_path.as_posix() + '/airnowtech/processed_data',
                  serials={'1': 'SN01',
                            '2': 'SN02',
                            '3': 'SN03'},
                  tzone_shift=5,
                  load_raw_data=False,
                  write_to_file=True)

Console Output:

.. code-block:: console

  Loading processed sensor data
  ..Example_Make_Model_SN01_daily.csv
  ..Example_Make_Model_SN01_full.csv
  ..Example_Make_Model_SN01_hourly.csv
  ..Example_Make_Model_SN02_daily.csv
  ..Example_Make_Model_SN02_full.csv
  ..Example_Make_Model_SN02_hourly.csv
  ..Example_Make_Model_SN03_daily.csv
  ..Example_Make_Model_SN03_full.csv
  ..Example_Make_Model_SN03_hourly.csv
  Loading reference dataframes
  ..2019-08
  ....H_201908_PM.csv
  ....H_201908_Met.csv
  ....H_201908_Gases.csv
  ..2019-09
  ....H_201909_PM.csv
  ....H_201909_Met.csv
  ....H_201909_Gases.csv
  Computing normalized PM25 values (by T-API T640X at 16.67 LPM)
  Computing normalized PM25 values (by T-API T640X at 16.67 LPM)
  Computing mean parameter values across concurrent sensor datasets
  Computing mean parameter values across concurrent sensor datasets

Arguments passed to ``SensorEvaluation``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* ``sensor_name``: The name of the sensor, should be the same name passed to the
  ``Create_Sensor_Directories()`` and ``Setup()`` methods.
* ``eval_param``: The parameter to evaluate, should be one of the parameters
  listed in the eval_params list passed to the ``Create_Sensor_Directories()`` method.
* ``reference_data``: The service or folder directory from which reference data
  are acquired. More detail about the different options for reference data acquisition below...
* ``serials``: A dictionary of sensor serial identifiers for each unit in a testing group.
* ``tzone_shift``: An integer value by which to shift the sensor data to UTC.
  Specifying ``0`` will not shift the data.
* ``load_raw_data``: If true, raw data in the appropriate subdirectory will be
  loaded and 1-hour and 24-hour averages will be computed and saved to a processed
  data subdirectory for the specified sensor. If false, processed data will be loaded.
* ``write_to_file``: If true and load_raw_data true, processed files will be
  written to folder location. In addition, subsequent evaluation statistics will
  be written to the Data and Figures/eval_stats sensor subdirectory. Figures will
  also be written to the appropriate figures subdirectory.
* kwargs (tip about for evaluation dates (other kwargs?))
