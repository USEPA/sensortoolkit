Reference Data
--------------

Upon creation of a class instance, the user must indicate what reference data
to use. Users can either specify that reference data should be retrieved by API
query (AirNow or AQS) or imported from a local destination (e.g., .csv files
downloaded from AirNowTech). Note that both the AirNow and AQS APIs require
users have an account and key to complete successful queries. AirNowTech also
requires a user account to access its online data portal. Accounts for these
services are free and can created via the following links
(`AirNowTech account request <https://www.airnowtech.org/requestAccnt.cfm>`_,
`AirNow API account request <https://docs.airnowapi.org/account/request/>`_,
`AQS API sign up <https://aqs.epa.gov/aqsweb/documents/data_api.html#signup>`_).

The use of each service involves a slightly difference process for data retreival,
and arguments that must be passed to ``SensorEvaluation`` at the time of instantiation.
The use of each service with ``SensorEvaluation`` is detailed below:

AirNowTech
^^^^^^^^^^

If users have an AirNowTech account, data files downloaded from https://www.airnowtech.org/data/index.cfm
can be imported for use by the ``SensorEvaluation`` class and `sensortoolkit` modules.

.. important::
  When downloading data from AirNowTech's online data query tool, users should check 'Table' and
  select 'Unpivoted' under the Display Settings box.

`sensortoolkit`'s ``Import_AirNowTech()`` function parses the downloaded dataset
in monthly intervals and creates three separate datasets for particulate matter
(:math:`PM_{2.5}` and :math:`PM_{10}`), gaseous pollutants (:math:`O3`, :math:`NO_2`, :math:`CO`, etc.),
and meteorological parameters (temperature, relative humidity, etc.). These data sets
are processed with `sensortoolkit`'s Reference Data Formatting Standard (R-DFS) and are
saved to ``../Data and Figures/reference_data/airnowtech/processed``.

.. code-block:: python

  import sensortoolkit

  ref_path = os.path.abspath(__file__ + '../../../reference_data')
  ref_path = pathlib.PureWindowsPath(ref_path)

  # Pre-process AirNowTech files, create separate, monthly files for PM, gas, met
  filename = 'AirNowTech_BurdensCreek_20190801_20190902_PMGasMet.csv'
  airnowtech_path = (ref_path.as_posix()
                     + '/airnowtech/downloaded_datasets/' + filename)
  sensortoolkit.Import_AirNowTech(airnowtech_path)

Once AirNowTech datasets have been formatted, the ``SensorEvaluation`` class can
be instantiated, where the ``reference_data`` argument is set to the full directory
path for the processed AirNowTech datasets:

.. code-block:: python

  from sensortoolkit import SensorEvaluation

  # Mock evaluation using AIRS reference data downloaded from AirNowTech
  Eval = SensorEvaluation(sensor_name='Example_Make_Model',
                          eval_param='PM25',
                          reference_data=ref_path.as_posix() + ‘/airnowtech/processed’,
                          bbox=AIRS_bbox,
                          serials={'1': 'SN01',
                                   '2': 'SN02',
                                   '3': 'SN03'},
                          tzone_shift=5,
                          load_raw_data=False,
                          write_to_file=False)

.. note::

  The sensor name, evaluation parameter, serials, timezone shift, load raw data
  option, and write to file option should be configured by the user for their
  unique use case and may differ from those shown above.

AQS API
^^^^^^^
To query AQS for reference data corresponding to the specified evaluation parameter,
the AQS site ID corresponding to the ambient monitoring site of interest must be specified.
The example below specifies the AQS Site ID for the Triple Oaks monitoring
site in Raleigh NC, nearby EPA’s testing site for sensor evaluations.
To determine the AQS ID for sites nearby a testing location, please visit `EPA's AirData
Air Quality Monitor Map <https://epa.maps.arcgis.com/apps/webappviewer/index.html?id=5f239fd3e72f424f98ef3d5def547eb5&extent=-146.2334,13.1913,-46.3896,56.5319>`_.
Additionally, the reference_data parameter should be set to ``AQS``

.. code-block:: python

  from sensortoolkit import SensorEvaluation

  # Mock evaluation using Triple Oak AQS site (nearby AIRS) reference data
  # obtained from the AQS API
  triple_oaks_ID = {"state": "37",
                    "county": "183",
                    "site": "0021"}

  SensorEvaluation.aqs_username = 'username_address@email.com'
  SensorEvaluation.aqs_key = 'Your-AQS-Key-Here'

  Eval = SensorEvaluation(sensor_name='Example_Make_Model',
                          eval_param='PM25',
                          reference_data='AQS',
                          aqs_id=triple_oaks_ID,
                          serials={'1': 'SN01',
                                   '2': 'SN02',
                                   '3': 'SN03’},
  		                    tzone_shift=5,
                          load_raw_data=True,
                          write_to_file=True)

.. note::

  The sensor name, evaluation parameter, serials, timezone shift, load raw data
  option, and write to file option should be configured by the user for their
  unique use case and may differ from those shown above.

Console Output:

.. code-block:: console

    Loading processed sensor data
    ..Example_Make_Model_SN01_daily.csv
    ..Example_Make_Model_SN01_full.csv
    ..Example_Make_Model_SN01_hourly.csv
    ..Example_Make_Model_SN02_daily.csv
    ..Example_Make_Model_SN02_full.csv
    ..Example_Make_Model_SN02_hourly.csv
    ..Example_Make_Model_SN03_daily.csv
    ..Example_Make_Model_SN03_full.csv
    ..Example_Make_Model_SN03_hourly.csv
    Querying AQS API
    ..Query start: 2019-08-01
    ..Query end: 2019-08-31
    ..Query site(s):
    ....Site name: Triple Oak
    ......AQS ID: 37-183-0021
    ......Latitude: 35.8652
    ......Longitude: -78.8197
    ..Query Status: Success
    Querying AQS API
    ..Query start: 2019-09-01
    ..Query end: 2019-09-30
    ..Query site(s):
    ....Site name: Triple Oak
    ......AQS ID: 37-183-0021
    ......Latitude: 35.8652
    ......Longitude: -78.8197
    ..Query Status: Success
    Writing AQS query dataframes to csv files
    ../reference_data/aqs/processed/AQS_37-183-0021_PM25_B190801_E190902.csv
    ../reference_data/aqs/raw_api_datasets/AQS_raw_37-183-0021_PM25_B190801_E190902.csv
    Computing normalized PM25 values (by Met One BAM-1022 PM2.5 w/ VSCC or TE-PM2.5C FEM)
    Computing normalized PM25 values (by Met One BAM-1022 PM2.5 w/ VSCC or TE-PM2.5C FEM)
    Computing mean parameter values across concurrent sensor datasets
    Computing mean parameter values across concurrent sensor datasets


* The AQS API is queried in monthly intervals for PM25 reference data recorded at
  the Triple Oaks air monitoring site, which was selected based on its proximity
  to the site where the air sensor was deployed. AQS returns a successful query,
  and the console indicates data were retrieved from the Triple Oaks monitoring
  site for the months of August and September 2019. AQS data are then parsed
  into the reference data format described in the parameter naming scheme data
  dictionary. Both raw (unmodified datasets as returned by the API) and
  processed datasets are written to .csv files at the folder path printed to the
  console.
* Sensor PM25 concentrations are normalized against reference measurements (this
  particular AQS query indicates that the reference monitor is a Met One BAM-1022).
* The mean across sensor measurements is also calculated.
* Processed sensor data are loaded

AirNow API
^^^^^^^^^^

To query AirNow for reference data corresponding to the specified evaluation
parameter, the parameter bbox  must be specified. AirNow returns all relevant
data within a bounding box region. The example on the right specifies a small
bounding box surrounding EPA’s testing site (AIRS) located at the Agency’s RTP
campus. Users are encouraged to set narrow margins for the bounding box surrounding
the air monitoring site of interest. Additionally, the reference_data parameter
should be set to ``AirNow``.

.. code-block:: python

  from sensortoolkit import SensorEvaluation

  # bbox for AIRS [set narrow margins (+/- 0.01 deg) around known coordinates]
  AIRS_bbox = {"minLat": "35.88",
               "maxLat": "35.89",
               "minLong": "-78.88",
               "maxLong": "-78.87"}

  SensorEvaluation.airnow_key = 'Your-AirNow-Key-Here'

  # Mock evaluation using AIRS reference data obtained from the AirNow API
  Eval = SensorEvaluation(sensor_name='Example_Make_Model',
                          eval_param='PM25',
                          reference_data='AirNow',
                          bbox=AIRS_bbox,
                          serials={'1': 'SN01',
                                   '2': 'SN02',
                                   '3': 'SN03'},
                          tzone_shift=5,
                          load_raw_data=False,
                          write_to_file=False)


.. note::

  The sensor name, evaluation parameter, serials, timezone shift, load raw data
  option, and write to file option should be configured by the user for their
  unique use case and may differ from those shown above.

Console Output:

.. code-block:: console

  Loading processed sensor data
  ..Example_Make_Model_SN01_daily.csv
  ..Example_Make_Model_SN01_full.csv
  ..Example_Make_Model_SN01_hourly.csv
  ..Example_Make_Model_SN02_daily.csv
  ..Example_Make_Model_SN02_full.csv
  ..Example_Make_Model_SN02_hourly.csv
  ..Example_Make_Model_SN03_daily.csv
  ..Example_Make_Model_SN03_full.csv
  ..Example_Make_Model_SN03_hourly.csv
  Querying AirNow API
  ..Query start: 2019-08-01
  ..Query end: 2019-08-31
  ..Query site(s):
  ....Site name: Burdens Creek
  ......AQS ID: 37-063-0099
  ......Latitude: 35.8894
  ......Longitude: -78.8747
  ..Query Status: Success
  Querying AirNow API
  ..Query start: 2019-09-01
  ..Query end: 2019-09-30
  ..Query site(s):
  ....Site name: Burdens Creek
  ......AQS ID: 37-063-0099
  ......Latitude: 35.8894
  ......Longitude: -78.8747
  ..Query Status: Success
  Writing AirNow query dataframes to csv files
  ../reference_data/airnow/processed/AirNow_37-063-0099_PM25_B190801_E190902.csv
  ../reference_data/airnow/raw_api_datasets/AirNow_raw_37-063-0099_PM25_B190801_E190902.csv
  Computing normalized PM25 values (by Unknown Reference)
  Computing normalized PM25 values (by Unknown Reference)
  Computing mean parameter values across concurrent sensor datasets
  Computing mean parameter values across concurrent sensor datasets


* The AirNow API is queried in monthly intervals for PM25 reference data recorded
  at monitoring sites within the specified bounding box. AirNow returns a successful
  query, and the console indicates data were retrieved from the Burdens Creek
  monitoring site. AirNow data are then parsed into the reference data format described
  in the parameter naming scheme data dictionary. Both raw (datasets as returned by
  the API) and processed datasets are written to .csv files at the folder path indicated.
* Sensor PM25 concentrations are normalized against reference measurements (AirNow
  does not indicate the name of the reference instrument for the evaluation parameter,
  so the reference is referred to as ’Unknown Reference’).
* The mean across sensor measurements is also calculated.
* Processed sensor data are loaded
